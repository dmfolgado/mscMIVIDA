[tool.poetry]
name = "mscmivida"
version = "0.0.0"
description = "Supporting code for the mscMIVIDA project."
authors = ["Fraunhofer AICOS <no-reply@fraunhofer.pt>"]
maintainers = ["Duarte Folgado <duarte.folgado@fraunhofer.pt>"]
readme = "README.md"
license = "No license"
# homepage = ""
# repository = ""
package-mode = false # change to true if you want to use the package mode
packages = [
    { include = "mscmivida", from = "src" }
]
exclude = [
  "tests", "notebooks", "docs", "__pycache__"
]

[tool.poetry.dependencies]
python = ">=3.9, ^3.12"
python-dotenv = "^1.0.0"
loguru = "^0.7.2"
mlflow-skinny = "^2.8.1"
# boto3 = "^1.33.6"
# Required due to issues stemming from boto3 outdated dependency specification (https://github.com/python-poetry/poetry-plugin-export/issues/183)
# urllib3 = ">=1.25.4,<1.27"
torch = "^2.5.1"
torchvision = "^0.20.1"


[tool.poetry.group.prod.dependencies]
fastapi = "^0.115.0"
python-multipart = "^0.0.15"
uvicorn = "^0.34.0"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
black = "^24.0.0"
flake8 = "^7.0.0"
isort = "^5.12.0"
mypy = "^1.14.0"
pre-commit = "^4.0.0"
pytest = "^7.4.3"
pytest-cov = "^5.0.0"
commitizen = "^4.0.0"
cz-bitbucket-jira-conventional = {git = "ssh://git@git.fraunhofer.pt/is2020/mlops-commit-drafter.git", rev = "v1.0.4"}
safety = "^3.0.0"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
pydocstyle = "^6.3.0"
mkdocs = "^1.6.0"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-material = "^9.4.14"
mkdocs-section-index = "^0.3.8"
mkdocstrings = {extras = ["python"], version = "^0.27.0"}
# TODO (telmo.baptista): Add support for Sphinx. Sphinx is only supported by Python 3.9+, so we have to manage the minimal version required before creation.

[tool.poetry.group.notebook]
optional = true
[tool.poetry.group.notebook.dependencies]
ipykernel = "^6.27.1"
nbconvert = "^7.11.0"

# [tool.poetry.group.dempy]
# optional = true
# [tool.poetry.group.dempy.dependencies]
# dempy = {git = "https://bitbucket.fraunhofer.pt/scm/demrepo/dataset-control-library-python.git"}

[tool.black]
line-length = 120
color = true
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
(
      \.egg
    | \.eggs
    | \.git
    | \.hg
    | \.dvc
    | \.mypy_cache
    | \.pytest_cache
    | \.nox
    | \.tox
    | \.venv
    | \.venv-docs
    | \.venv-dev
    | \.venv-note
    | \.venv-dempy
    | _build
    | build
    | dist
    | setup.py
)
'''

# `isort` configurations
[tool.isort]
# https://github.com/timothycrosley/isort
py_version = 312
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120
skip_gitignore = true
color_output = true
atomic = true

# `coverage` configurations
[tool.coverage.run]
source = ["src/mscmivida"]
branch = true
command_line = '-m pytest'

[tool.coverage.report]
exclude_lines = [
  "pragma: nocover",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "raise AssertionError",
]
show_missing = true
ignore_errors = true
skip_covered = true
#fail_under = 100
#precision = 1
omit = [
  "test/*",
  ".venv*",
]

# `pytest` configurations
[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-vv", "--doctest-modules"]
doctest_optionflags = "NORMALIZE_WHITESPACE"
testpaths = ["test"]
filterwarnings = ["ignore::DeprecationWarning"]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html
python_version = "3.12"
pretty = true
show_traceback = true
color_output = true
warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true

[tool.vulture]
paths = ["src"]
min_confidence = 65

[tool.pydocstyle]
convention = "google"
#ignore = "D205,D415"

[tool.interrogate]
# https://github.com/econchick/interrogate#configuration
ignore-init-method = true
fail-under = 95
color = true
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 0
quiet = false
exclude = ["setup.py", "docs", "build"]

[tool.nbqa.config]
black = "pyproject.toml"
isort = "pyproject.toml"

[tool.nbqa.mutate]
isort = 1
black = 1
pyupgrade = 1

[tool.nbqa.addopts]
pyupgrade = ["--py39-plus"]

[tool.nbqa.files]
isort = "^notebooks/"
black = "^notebooks/"
flake8 = "^notebooks/"
mypy = "^notebooks/"
pydocstyle = "^notebooks/"
pyupgrade = "^notebooks/"

[tool.bandit]
targets = ["src"]
# (optional) list included test IDs here, eg '[B101, B406]':
tests = ["B201", "B301"]
# (optional) list skipped test IDs here, eg '[B101, B406]':
skips = ["B101", "B601"]

[tool.bandit.assert_used]
exclude = ["*_test.py", "test_*.py"]

# TODO
# https://github.com/terrencepreilly/darglint/issues/130

[tool.cruft]
skip = [".git"]

[tool.commitizen]
name = "cz_bitbucket_jira_conventional"
jira_base_url = "https://jira.fraunhofer.pt"
bitbucket_repo = "mscmivida"
bitbucket_project = "mscMIVIDA"
version = "0.0.0"
tag_format = "v$version"
version_files = [
    "setup.py",
    "pyproject.toml:version",
    "VERSION"
]
bump_message = "release $current_version â†’ $new_version [skip-ci]"
update_changelog_on_bump = true
changelog_incremental = true
unreleased_version = "v0.0.0"
annotated_tag = true
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[build-system]
requires = ["poetry-core>=2.0.0, <3.0.0"]
build-backend = "poetry.core.masonry.api"
